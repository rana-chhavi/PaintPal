/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { approveReturnBorrowedPainting } from '../fn/painting/approve-return-borrowed-painting';
import { ApproveReturnBorrowedPainting$Params } from '../fn/painting/approve-return-borrowed-painting';
import { borrowPainting } from '../fn/painting/borrow-painting';
import { BorrowPainting$Params } from '../fn/painting/borrow-painting';
import { findAllBorrowedPaintings } from '../fn/painting/find-all-borrowed-paintings';
import { FindAllBorrowedPaintings$Params } from '../fn/painting/find-all-borrowed-paintings';
import { findAllPaintings } from '../fn/painting/find-all-paintings';
import { FindAllPaintings$Params } from '../fn/painting/find-all-paintings';
import { findAllPaintingsByOwner } from '../fn/painting/find-all-paintings-by-owner';
import { FindAllPaintingsByOwner$Params } from '../fn/painting/find-all-paintings-by-owner';
import { findAllReturnedPaintings } from '../fn/painting/find-all-returned-paintings';
import { FindAllReturnedPaintings$Params } from '../fn/painting/find-all-returned-paintings';
import { getPaintingById } from '../fn/painting/get-painting-by-id';
import { GetPaintingById$Params } from '../fn/painting/get-painting-by-id';
import { PageResponseBorrowedPaintingResponse } from '../models/page-response-borrowed-painting-response';
import { PageResponsePaintingResponse } from '../models/page-response-painting-response';
import { PaintingResponse } from '../models/painting-response';
import { returnBorrowPainting } from '../fn/painting/return-borrow-painting';
import { ReturnBorrowPainting$Params } from '../fn/painting/return-borrow-painting';
import { savePainting } from '../fn/painting/save-painting';
import { SavePainting$Params } from '../fn/painting/save-painting';
import { updateArchivedStatus } from '../fn/painting/update-archived-status';
import { UpdateArchivedStatus$Params } from '../fn/painting/update-archived-status';
import { updateShareableStatus } from '../fn/painting/update-shareable-status';
import { UpdateShareableStatus$Params } from '../fn/painting/update-shareable-status';
import { uploadPaintingImage } from '../fn/painting/upload-painting-image';
import { UploadPaintingImage$Params } from '../fn/painting/upload-painting-image';

@Injectable({ providedIn: 'root' })
export class PaintingService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `findAllPaintings()` */
  static readonly FindAllPaintingsPath = '/painting';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllPaintings()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllPaintings$Response(params?: FindAllPaintings$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponsePaintingResponse>> {
    return findAllPaintings(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllPaintings$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllPaintings(params?: FindAllPaintings$Params, context?: HttpContext): Observable<PageResponsePaintingResponse> {
    return this.findAllPaintings$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponsePaintingResponse>): PageResponsePaintingResponse => r.body)
    );
  }

  /** Path part for operation `savePainting()` */
  static readonly SavePaintingPath = '/painting';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `savePainting()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  savePainting$Response(params: SavePainting$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return savePainting(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `savePainting$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  savePainting(params: SavePainting$Params, context?: HttpContext): Observable<number> {
    return this.savePainting$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `uploadPaintingImage()` */
  static readonly UploadPaintingImagePath = '/painting/image/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadPaintingImage()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadPaintingImage$Response(params: UploadPaintingImage$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return uploadPaintingImage(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadPaintingImage$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadPaintingImage(params: UploadPaintingImage$Params, context?: HttpContext): Observable<{
}> {
    return this.uploadPaintingImage$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `borrowPainting()` */
  static readonly BorrowPaintingPath = '/painting/borrow/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `borrowPainting()` instead.
   *
   * This method doesn't expect any request body.
   */
  borrowPainting$Response(params: BorrowPainting$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return borrowPainting(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `borrowPainting$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  borrowPainting(params: BorrowPainting$Params, context?: HttpContext): Observable<number> {
    return this.borrowPainting$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `updateShareableStatus()` */
  static readonly UpdateShareableStatusPath = '/painting/shareable/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateShareableStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateShareableStatus$Response(params: UpdateShareableStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return updateShareableStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateShareableStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateShareableStatus(params: UpdateShareableStatus$Params, context?: HttpContext): Observable<number> {
    return this.updateShareableStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `returnBorrowPainting()` */
  static readonly ReturnBorrowPaintingPath = '/painting/borrow/return/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `returnBorrowPainting()` instead.
   *
   * This method doesn't expect any request body.
   */
  returnBorrowPainting$Response(params: ReturnBorrowPainting$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return returnBorrowPainting(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `returnBorrowPainting$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  returnBorrowPainting(params: ReturnBorrowPainting$Params, context?: HttpContext): Observable<number> {
    return this.returnBorrowPainting$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `approveReturnBorrowedPainting()` */
  static readonly ApproveReturnBorrowedPaintingPath = '/painting/borrow/return/approve/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `approveReturnBorrowedPainting()` instead.
   *
   * This method doesn't expect any request body.
   */
  approveReturnBorrowedPainting$Response(params: ApproveReturnBorrowedPainting$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return approveReturnBorrowedPainting(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `approveReturnBorrowedPainting$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  approveReturnBorrowedPainting(params: ApproveReturnBorrowedPainting$Params, context?: HttpContext): Observable<number> {
    return this.approveReturnBorrowedPainting$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `updateArchivedStatus()` */
  static readonly UpdateArchivedStatusPath = '/painting/archived/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateArchivedStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateArchivedStatus$Response(params: UpdateArchivedStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return updateArchivedStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateArchivedStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateArchivedStatus(params: UpdateArchivedStatus$Params, context?: HttpContext): Observable<number> {
    return this.updateArchivedStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `getPaintingById()` */
  static readonly GetPaintingByIdPath = '/painting/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPaintingById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPaintingById$Response(params: GetPaintingById$Params, context?: HttpContext): Observable<StrictHttpResponse<PaintingResponse>> {
    return getPaintingById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPaintingById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPaintingById(params: GetPaintingById$Params, context?: HttpContext): Observable<PaintingResponse> {
    return this.getPaintingById$Response(params, context).pipe(
      map((r: StrictHttpResponse<PaintingResponse>): PaintingResponse => r.body)
    );
  }

  /** Path part for operation `findAllReturnedPaintings()` */
  static readonly FindAllReturnedPaintingsPath = '/painting/returned';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllReturnedPaintings()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllReturnedPaintings$Response(params?: FindAllReturnedPaintings$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseBorrowedPaintingResponse>> {
    return findAllReturnedPaintings(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllReturnedPaintings$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllReturnedPaintings(params?: FindAllReturnedPaintings$Params, context?: HttpContext): Observable<PageResponseBorrowedPaintingResponse> {
    return this.findAllReturnedPaintings$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseBorrowedPaintingResponse>): PageResponseBorrowedPaintingResponse => r.body)
    );
  }

  /** Path part for operation `findAllPaintingsByOwner()` */
  static readonly FindAllPaintingsByOwnerPath = '/painting/owner';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllPaintingsByOwner()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllPaintingsByOwner$Response(params?: FindAllPaintingsByOwner$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponsePaintingResponse>> {
    return findAllPaintingsByOwner(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllPaintingsByOwner$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllPaintingsByOwner(params?: FindAllPaintingsByOwner$Params, context?: HttpContext): Observable<PageResponsePaintingResponse> {
    return this.findAllPaintingsByOwner$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponsePaintingResponse>): PageResponsePaintingResponse => r.body)
    );
  }

  /** Path part for operation `findAllBorrowedPaintings()` */
  static readonly FindAllBorrowedPaintingsPath = '/painting/borrowed';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllBorrowedPaintings()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllBorrowedPaintings$Response(params?: FindAllBorrowedPaintings$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseBorrowedPaintingResponse>> {
    return findAllBorrowedPaintings(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllBorrowedPaintings$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllBorrowedPaintings(params?: FindAllBorrowedPaintings$Params, context?: HttpContext): Observable<PageResponseBorrowedPaintingResponse> {
    return this.findAllBorrowedPaintings$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseBorrowedPaintingResponse>): PageResponseBorrowedPaintingResponse => r.body)
    );
  }

}
